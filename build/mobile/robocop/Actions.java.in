#filter substitution
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Firefox Mobile Test Framework.
 *
 * The Initial Developer of the Original Code is Mozilla.
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Trevor Fairey <tnfairey@gmail.com>
 * David Burns <dburns@mozilla.com>
 * Joel Maher <joel.maher@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package @ANDROID_PACKAGE_NAME@;
import java.util.List;

public interface Actions {
  public enum SpecialKey {
    DOWN, UP, LEFT, RIGHT, ENTER
  }

  public interface EventExpecter {
    /** Blocks until the event has been received. Subsequent calls will return immediately. */
    public void blockForEvent();
    /** Polls to see if the event has been received. Once this returns true, subsequent calls will also return true. */
    public boolean eventReceived();
  }

  /**
   * Listens for a gecko event to be sent from the Gecko instance.
   * The returned object can be used to test if the event has been
   * received. Note that only one event is listened for.
   * 
   * @param geckoEvent The geckoEvent JSONObject's type
   */
  EventExpecter expectGeckoEvent(String geckoEvent);

  /**
   * Listens for a paint event.
   */
  EventExpecter expectPaint();

  // Send the string kewsToSend to the application 
  void sendKeys(String keysToSend);
  //Send any of the above keys to the element
  void sendSpecialKey(SpecialKey button);

  void drag(int startingX, int endingX, int startingY, int endingY);
}
