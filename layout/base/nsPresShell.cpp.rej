***************
*** 34,49 ****
  #include "nsIDocument.h"
  #include "nsIDOMXULDocument.h"
  #include "nsCSSStyleSheet.h" // XXX for UA sheet loading hack, can this go away please?
  #include "nsIDOMCSSStyleSheet.h"  // for Pref-related rule management (bugs 22963,20760,31816)
  #include "nsAnimationManager.h"
  #include "nsINameSpaceManager.h"  // for Pref-related rule management (bugs 22963,20760,31816)
  #include "nsIServiceManager.h"
  #include "nsFrame.h"
  #include "nsViewManager.h"
  #include "nsView.h"
  #include "nsCRTGlue.h"
  #include "prlog.h"
  #include "prprf.h"
  #include "prinrval.h"
  #include "nsTArray.h"
  #include "nsCOMArray.h"
--- 34,50 ----
  #include "nsIDocument.h"
  #include "nsIDOMXULDocument.h"
  #include "nsCSSStyleSheet.h" // XXX for UA sheet loading hack, can this go away please?
  #include "nsIDOMCSSStyleSheet.h"  // for Pref-related rule management (bugs 22963,20760,31816)
  #include "nsAnimationManager.h"
  #include "nsINameSpaceManager.h"  // for Pref-related rule management (bugs 22963,20760,31816)
  #include "nsIServiceManager.h"
  #include "nsFrame.h"
+ #include "FrameLayerBuilder.h"
  #include "nsViewManager.h"
  #include "nsView.h"
  #include "nsCRTGlue.h"
  #include "prlog.h"
  #include "prprf.h"
  #include "prinrval.h"
  #include "nsTArray.h"
  #include "nsCOMArray.h"
***************
*** 2020,2035 ****
          //pop it we can still get its new frame from its content
          nsIContent *currentEventContent = aFrame->GetContent();
          mCurrentEventContentStack.ReplaceObjectAt(currentEventContent, i);
          mCurrentEventFrameStack[i] = nullptr;
        }
      }
    
      mFramesToDirty.RemoveEntry(aFrame);
    }
  }
  
  already_AddRefed<nsCaret> PresShell::GetCaret() const
  {
    nsCaret* caret = mCaret;
    NS_IF_ADDREF(caret);
    return caret;
--- 2021,2043 ----
          //pop it we can still get its new frame from its content
          nsIContent *currentEventContent = aFrame->GetContent();
          mCurrentEventContentStack.ReplaceObjectAt(currentEventContent, i);
          mCurrentEventFrameStack[i] = nullptr;
        }
      }
    
      mFramesToDirty.RemoveEntry(aFrame);
+   } else {
+     // We must delete this property in situ so that its destructor removes the
+     // frame from FrameLayerBuilder::DisplayItemData::mFrameList -- otherwise
+     // the DisplayItemData destructor will use the destroyed frame when it
+     // tries to remove it from the (array) value of this property.
+     mPresContext->PropertyTable()->
+       Delete(aFrame, FrameLayerBuilder::LayerManagerDataProperty());
    }
  }
  
  already_AddRefed<nsCaret> PresShell::GetCaret() const
  {
    nsCaret* caret = mCaret;
    NS_IF_ADDREF(caret);
    return caret;
