<?xml version="1.0"?>

# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Sync
#
# The Initial Developer of the Original Code is Mozilla Foundation.
# Portions created by the Initial Developer are Copyright (C) 2010
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

<!DOCTYPE bindings [
<!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
%notificationDTD;
]>

<bindings id="notificationBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="notificationbox" extends="chrome://global/content/bindings/notification.xml#notificationbox">
    <content>
      <xul:vbox xbl:inherits="hidden=notificationshidden">
        <xul:spacer/>
        <children includes="notification"/>
      </xul:vbox>
      <children/>
    </content>

    <implementation>
      <constructor><![CDATA[
        let temp = {};
        Cu.import("resource://services-sync/ext/Observers.js", temp);
        temp.Observers.add("weave:notification:added", this.onNotificationAdded, this);
        temp.Observers.add("weave:notification:removed", this.onNotificationRemoved, this);

        for each (var notification in Weave.Notifications.notifications)
          this._appendNotification(notification);
      ]]></constructor>

      <destructor><![CDATA[
        let temp = {};
        Cu.import("resource://services-sync/ext/Observers.js", temp);
        temp.Observers.remove("weave:notification:added", this.onNotificationAdded, this);
        temp.Observers.remove("weave:notification:removed", this.onNotificationRemoved, this);
      ]]></destructor>

      <method name="onNotificationAdded">
        <parameter name="subject"/>
        <parameter name="data"/>
        <body><![CDATA[
          this._appendNotification(subject);
        ]]></body>
      </method>

      <method name="onNotificationRemoved">
        <parameter name="subject"/>
        <parameter name="data"/>
        <body><![CDATA[
          // If the view of the notification hasn't been removed yet, remove it.
          var notifications = this.allNotifications;
          for each (var notification in notifications) {
            if (notification.notification == subject) {
              notification.close();
              break;
            }
          }
        ]]></body>
      </method>

      <method name="_appendNotification">
        <parameter name="notification"/>
        <body><![CDATA[
          var node = this.appendNotification(notification.description,
                                             notification.title,
                                             notification.iconURL,
                                             notification.priority,
                                             notification.buttons);
          node.notification = notification;
        ]]></body>
      </method>

    </implementation>
  </binding>

  <binding id="notification" extends="chrome://global/content/bindings/notification.xml#notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type">
        <xul:toolbarbutton ondblclick="event.stopPropagation();"
                           class="messageCloseButton tabbable"
                           xbl:inherits="hidden=hideclose"
                           tooltiptext="&closeNotification.tooltip;"
                           oncommand="document.getBindingParent(this).close()"/>
        <xul:hbox anonid="details" align="center" flex="1">
          <xul:image anonid="messageImage" class="messageImage" xbl:inherits="src=image"/>
          <xul:description anonid="messageText" class="messageText" xbl:inherits="xbl:text=label"/>

          <!-- The children are the buttons defined by the notification. -->
          <xul:hbox oncommand="document.getBindingParent(this)._doButtonCommand(event);">
            <children/>
          </xul:hbox>
        </xul:hbox>
      </xul:hbox>
    </content>
    <implementation>
      <!-- Note: this used to be a field, but for some reason it kept getting
         - reset to its default value for TabNotification elements.
         - As a property, that doesn't happen, even though the property stores
         - its value in a JS property |_notification| that is not defined
         - in XBL as a field or property.  Maybe this is wrong, but it works.
         -->
      <property name="notification"
                onget="return this._notification"
                onset="this._notification = val; return val;"/>
      <method name="close">
        <body><![CDATA[
          Weave.Notifications.remove(this.notification);

          // We should be able to call the base class's close method here
          // to remove the notification element from the notification box,
          // but we can't because of bug 373652, so instead we copied its code
          // and execute it below.
          var control = this.control;
          if (control)
            control.removeNotification(this);
          else
            this.hidden = true;
        ]]></body>
      </method>
    </implementation>
  </binding>

</bindings>
