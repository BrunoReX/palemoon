/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Session Restore component.
 *
 * The Initial Developer of the Original Code is
 * Simon BÃ¼nzli <zeniko@gmail.com>
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dietrich Ayala <dietrich@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * nsISessionStore keeps track of the current browsing state - i.e.
 * tab history, cookies, scroll state, form data, POSTDATA and window features
 * - and allows to restore everything into one window.
 */

[scriptable, uuid(e7bb7828-0e32-4995-a848-4aa35df603c7)]
interface nsISessionStartup: nsISupports
{
  // Get session state as string
  readonly attribute AString state;

  /**
   * Determine if session should be restored 
   */
  boolean doRestore();

  /**
   * What type of session we're restoring.
   * NO_SESSION       There is no data available from the previous session
   * RECOVER_SESSION  The last session crashed. It will either be restored or
   *                  about:sessionrestore will be shown.
   * RESUME_SESSION   The previous session should be restored at startup
   * DEFER_SESSION    The previous session is fine, but it shouldn't be restored
   *                  without explicit action (with the exception of pinned tabs)
   */
  const unsigned long NO_SESSION = 0;
  const unsigned long RECOVER_SESSION = 1;
  const unsigned long RESUME_SESSION = 2;
  const unsigned long DEFER_SESSION = 3;

  readonly attribute unsigned long sessionType;
};
