/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corp.
 * Portions created by the Initial Developer are Copyright (C) 2000
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[scriptable, uuid(498dcd6c-94a2-4c32-8c77-531b583dff37)]
interface nsIScreen : nsISupports
{
  /**
   * Levels of brightness for the screen, from off to full brightness.
   */
  const unsigned long BRIGHTNESS_DIM = 0;
  const unsigned long BRIGHTNESS_FULL = 1;

  /* The number of different brightness levels */
  const unsigned long BRIGHTNESS_LEVELS = 2;

  void GetRect(out long left, out long top, out long width, out long height);
  void GetAvailRect(out long left, out long top, out long width, out long height);

  /**
   * Locks the minimum brightness of the screen, forcing it to be at
   * least as bright as a certain brightness level. Each call to this
   * function must eventually be followed by a corresponding call to
   * unlockMinimumBrightness, with the same brightness level.
   *
   * @param brightness A brightness level, one of the above constants.
   */
  void lockMinimumBrightness(in unsigned long brightness);

  /**
   * Releases a lock on the screen brightness. This must be called
   * (eventually) after a corresponding call to lockMinimumBrightness.
   *
   * @param brightness A brightness level, one of the above constants.
   */
  void unlockMinimumBrightness(in unsigned long brightness);
  
  readonly attribute long pixelDepth;
  readonly attribute long colorDepth;  
};
