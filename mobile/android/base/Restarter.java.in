/* -*- Mode: Java; c-basic-offset: 4; tab-width: 20; indent-tabs-mode: nil; -*-
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Android code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Brad Lassey <blassey@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#filter substitution
package @ANDROID_PACKAGE_NAME@;

import android.app.*;
import android.content.*;
import android.util.*;
import android.os.*;
import java.io.*;
import org.mozilla.gecko.GeckoAppShell;

public class Restarter extends Activity {
    private static final String LOGTAG = "GeckoRestarter";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        Log.i(LOGTAG, "trying to restart @MOZ_APP_NAME@");
        try {
            int countdown = 40;
            while (GeckoAppShell.checkForGeckoProcs() &&  --countdown > 0) {
                // Wait for the old process to die before we continue
                try {
                    Thread.currentThread().sleep(100);
                } catch (InterruptedException ie) {}
            }
            
            if (countdown <= 0) {
                // if the countdown expired, something is hung
                GeckoAppShell.killAnyZombies();
                countdown = 10;
                // wait for the kill to take effect
                while (GeckoAppShell.checkForGeckoProcs() &&  --countdown > 0) {
                    try {
                        Thread.currentThread().sleep(100);
                    } catch (InterruptedException ie) {}
                }
            }
        } catch (Exception e) {
            Log.i(LOGTAG, e.toString());
        }
        try {
            String action = "org.mozilla.gecko.restart_update".equals(getIntent().getAction()) ?
                            App.ACTION_UPDATE : Intent.ACTION_MAIN;

            Intent intent = new Intent(action);
            intent.setClassName("@ANDROID_PACKAGE_NAME@",
                                "@ANDROID_PACKAGE_NAME@.App");
            Bundle b = getIntent().getExtras();
            if (b != null)
                intent.putExtras(b);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            Log.i(LOGTAG, intent.toString());
            startActivity(intent);
        } catch (Exception e) {
            Log.i(LOGTAG, e.toString());
        }
        // Give the new process time to start before we die
        GeckoAppShell.waitForAnotherGeckoProc();
        System.exit(0);
    }
};
