/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Honza Bambas <honzab@firemni.cz>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIStreamListener;

/**
 * Implemented by content side of IPC protocols.
 */

[scriptable, uuid(c45b92ae-4f07-41dd-b0ef-aa044eeabb1e)]
interface nsIChildChannel : nsISupports
{
  /**
   * Create the chrome side of the IPC protocol and join an existing 'real'
   * channel on the parent process.  The id is provided by
   * nsIRedirectChannelRegistrar on the chrome process and pushed to the child
   * protocol as an argument to event starting a redirect.
   *
   * Primarilly used in HttpChannelChild::Redirect1Begin on a newly created
   * child channel, where the new channel is intended to be created on the
   * child process.
   */
  void connectParent(in PRUint32 id);

  /**
   * As AsyncOpen is called on the chrome process for redirect target channels,
   * we have to inform the child side of the protocol of that fact by a special
   * method.
   */
  void completeRedirectSetup(in nsIStreamListener aListener,
                             in nsISupports aContext);
};
