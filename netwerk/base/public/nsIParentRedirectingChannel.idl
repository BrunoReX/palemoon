/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Honza Bambas <honzab@firemni.cz>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIParentChannel.idl"

interface nsITabParent;
interface nsIChannel;
interface nsIAsyncVerifyRedirectCallback;

/**
 * Implemented by chrome side of IPC protocols that support redirect responses.
 */

[scriptable, uuid(cb7edc1c-096f-44de-957c-cb93de1545f6)]
interface nsIParentRedirectingChannel : nsIParentChannel
{
  /**
   * Called when the channel got a response that redirects it to a different
   * URI.  The implementation is responsible for calling the redirect observers
   * on the child process and provide the decision result to the callback.
   *
   * @param newChannelId
   *    id of the redirect channel obtained from nsIRedirectChannelRegistrar.
   * @param newURI
   *    the URI we redirect to
   * @param callback
   *    redirect result callback, usage is compatible with how
   *    nsIChannelEventSink defines it
   */
  void startRedirect(in PRUint32 newChannelId,
                     in nsIChannel newChannel,
                     in PRUint32 redirectFlags,
                     in nsIAsyncVerifyRedirectCallback callback);

  /**
   * Called after we are done with redirecting process and we know if to
   * redirect or not.  Forward the redirect result to the child process.  From
   * that moment the nsIParentChannel implementation expects it will be
   * forwarded all notifications from the 'real' channel.
   *
   * Primarilly used by HttpChannelParentListener::OnRedirectResult and kept
   * as mActiveChannel and mRedirectChannel in that class.
   */
  void completeRedirect(in PRBool succeeded);
};
