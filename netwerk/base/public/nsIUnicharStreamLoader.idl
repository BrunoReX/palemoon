/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *    Darin Fisher <darin@netscape.com>  (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIStreamListener.idl"

interface nsIUnicharInputStream;
interface nsIUnicharStreamLoader;
interface nsIChannel;

[scriptable, uuid(c2982b39-2e48-429e-92b7-99348a1633c5)]
interface nsIUnicharStreamLoaderObserver : nsISupports
{
  /**
   * Called as soon as at least 512 octets of data have arrived.
   * If the stream receives fewer than 512 octets of data in total,
   * called upon stream completion but before calling OnStreamComplete.
   * Will not be called if the stream receives no data at all.
   *
   * @param aLoader the unichar stream loader
   * @param aContext the context parameter of the underlying channel
   * @param aSegment up to 512 octets of raw data from the stream
   *
   * @return the name of the character set to be used to decode this stream
   */
  ACString onDetermineCharset(in nsIUnicharStreamLoader aLoader,
                              in nsISupports aContext,
                              in ACString aSegment);

  /**
   * Called when the entire stream has been loaded and decoded.
   *
   * @param aLoader the unichar stream loader
   * @param aContext the context parameter of the underlying channel
   * @param aStatus the status of the underlying channel
   * @param aBuffer the contents of the stream, decoded to UTF-16.
   *
   * This method will always be called asynchronously by the
   * nsUnicharIStreamLoader involved, on the thread that called the
   * loader's init() method.  If onDetermineCharset fails,
   * onStreamComplete will still be called, but aStatus will be an
   * error code.
   */
  void onStreamComplete(in nsIUnicharStreamLoader aLoader,
                        in nsISupports aContext,
                        in nsresult aStatus,
                        in AString aBuffer);
};

/**
 * Asynchronously load a channel, converting the data to UTF-16.
 *
 * To use this interface, first call init() with a
 * nsIUnicharStreamLoaderObserver that will be notified when the data has been
 * loaded. Then call asyncOpen() on the channel with the nsIUnicharStreamLoader
 * as the listener. The context argument in the asyncOpen() call will be
 * passed to the onStreamComplete() callback.
 */
[scriptable, uuid(afb62060-37c7-4713-8a84-4a0c1199ba5c)]
interface nsIUnicharStreamLoader : nsIStreamListener
{
  /**
   * Initializes the unichar stream loader
   *
   * @param aObserver the observer to notify when a charset is needed and when
   *                  the load is complete
   */
  void init(in nsIUnicharStreamLoaderObserver aObserver);

  /**
   * The channel attribute is only valid inside the onDetermineCharset
   * and onStreamComplete callbacks.  Otherwise it will be null.
   */
  readonly attribute nsIChannel channel;

  /**
   * The charset that onDetermineCharset returned, if that's been
   * called.
   */
  readonly attribute ACString charset;
};
