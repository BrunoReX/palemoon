***************
*** 25,43 ****
  namespace mozilla {
  namespace gfx {
  
  class SourceSurfaceD2DTarget;
  class SourceSurfaceD2D;
  class GradientStopsD2D;
  class ScaledFontDWrite;
  
  const int32_t kLayerCacheSize = 5;
  
  struct PrivateD3D10DataD2D
  {
    RefPtr<ID3D10Effect> mEffect;
    RefPtr<ID3D10InputLayout> mInputLayout;
    RefPtr<ID3D10Buffer> mVB;
    RefPtr<ID3D10BlendState> mBlendStates[OP_COUNT];
  };
  
  class DrawTargetD2D : public DrawTarget
--- 25,177 ----
  namespace mozilla {
  namespace gfx {
  
+ class DrawTargetD2D;
  class SourceSurfaceD2DTarget;
  class SourceSurfaceD2D;
  class GradientStopsD2D;
  class ScaledFontDWrite;
  
  const int32_t kLayerCacheSize = 5;
  
+ class GradientStopsCacheD2D
+ {
+ public:
+     GradientStopsCacheD2D(DrawTargetD2D* const _Target);
+     ~GradientStopsCacheD2D(void);
+ 
+     RefPtr<ID2D1GradientStopCollection> Create(
+         const D2D1_GRADIENT_STOP* GradientStops,
+         const UINT GradientStopsCount,
+ //        const D2D1_GAMMA ColorInterpolationGamma,
+         const D2D1_EXTEND_MODE ExtendMode);
+ 
+ private:
+     struct _Cache {
+         RefPtr<ID2D1GradientStopCollection> StopCollection;
+         D2D1_GRADIENT_STOP* GradientStops;
+         UINT StopCount;
+ //        D2D1_GAMMA ColorInterpolationGamma;
+         D2D1_EXTEND_MODE ExtendMode;
+     };
+     static const UINT MaxCache = 128;
+     DrawTargetD2D* Target;
+     _Cache* Cache;
+     _Cache* CacheIdx;
+     _Cache* MaxCacheIdx;
+ };
+ 
+ class GradientBrushCacheD2D
+ {
+ public:
+     enum {
+         Linear, Radial,
+     };
+ 
+     GradientBrushCacheD2D(DrawTargetD2D* const _Target, const int Style);
+     ~GradientBrushCacheD2D(void);
+ 
+     TemporaryRef<ID2D1Brush> Create(
+         void* const GradientBrushProperties,
+         const D2D1_BRUSH_PROPERTIES& BrushProperties,
+         ID2D1GradientStopCollection* GradientStopCollection);
+ 
+ private:
+     struct _Cache {
+         RefPtr<ID2D1Brush> Brush;
+         D2D1_GRADIENT_STOP* GradientStops;
+         UINT StopCount;
+ //        D2D1_GAMMA ColorInterpolationGamma;
+         D2D1_EXTEND_MODE ExtendMode;
+     };
+     static const UINT MaxCache = 128;
+     DrawTargetD2D* Target;
+     _Cache* Cache;
+     _Cache* CacheIdx;
+     _Cache* MaxCacheIdx;
+     TemporaryRef<ID2D1Brush> (GradientBrushCacheD2D::*pCreateGradientBrush)(
+         void* const GradientBrushProperties,
+         const D2D1_BRUSH_PROPERTIES& BrushProperties,
+         ID2D1GradientStopCollection* GradientStopCollection);
+     TemporaryRef<ID2D1Brush> (GradientBrushCacheD2D::*pSetPropertiesGradientBrush)(
+         _Cache* const Ptr,
+         void* const GradientBrushProperties,
+         const D2D1_BRUSH_PROPERTIES& BrushProperties);
+ 
+     TemporaryRef<ID2D1Brush> CreateLinearGradientBrush(
+         void* const GradientBrushProperties,
+         const D2D1_BRUSH_PROPERTIES& BrushProperties,
+         ID2D1GradientStopCollection* GradientStopCollection);
+     TemporaryRef<ID2D1Brush> CreateRadialGradientBrush(
+         void* const GradientBrushProperties,
+         const D2D1_BRUSH_PROPERTIES& BrushProperties,
+         ID2D1GradientStopCollection* GradientStopCollection);
+     TemporaryRef<ID2D1Brush> SetPropertiesLinearGradientBrush(
+         _Cache* const Ptr,
+         void* const GradientBrushProperties,
+         const D2D1_BRUSH_PROPERTIES& BrushProperties);
+     TemporaryRef<ID2D1Brush> SetPropertiesRadialGradientBrush(
+         _Cache* const Ptr,
+         void* const GradientBrushProperties,
+         const D2D1_BRUSH_PROPERTIES& BrushProperties);
+ };
+ 
+ class GradientTextureCacheD2D
+ {
+ public:
+     GradientTextureCacheD2D(DrawTargetD2D* const _Target);
+     ~GradientTextureCacheD2D(void);
+ 
+     TemporaryRef<ID3D10Texture2D> Create(const GradientStopsD2D* aStops);
+ 
+ private:
+     struct _Cache {
+         RefPtr<ID3D10Texture2D> Texture;
+         D2D1_GRADIENT_STOP* GradientStops;
+         UINT StopCount;
+ //        D2D1_GAMMA ColorInterpolationGamma;
+         D2D1_EXTEND_MODE ExtendMode;
+     };
+     static const UINT MaxCache = 128;
+     DrawTargetD2D* Target;
+     _Cache* Cache;
+     _Cache* CacheIdx;
+     _Cache* MaxCacheIdx;
+ 
+     TemporaryRef<ID3D10Texture2D> CreateGradientTexture(
+         D2D1_GRADIENT_STOP* const GradientStops,
+         const UINT StopCount);
+ };
+ 
  struct PrivateD3D10DataD2D
  {
    RefPtr<ID3D10Effect> mEffect;
    RefPtr<ID3D10InputLayout> mInputLayout;
    RefPtr<ID3D10Buffer> mVB;
    RefPtr<ID3D10BlendState> mBlendStates[OP_COUNT];
+ 
+   ID3D10EffectTechnique* Technique_SampleMaskedTexture;
+   ID3D10EffectTechnique* Technique_SampleRadialGradient;
+   ID3D10EffectTechnique* Technique_SampleTextTexture;
+   ID3D10EffectTechnique* Technique_SampleTexture;
+   ID3D10EffectTechnique* Technique_SampleTextureWithShadow;
+ 
+   ID3D10EffectVariable* Variable_A;
+   ID3D10EffectVariable* Variable_BlurOffsetsH;
+   ID3D10EffectVariable* Variable_BlurOffsetsV;
+   ID3D10EffectVariable* Variable_BlurWeights;
+   ID3D10EffectVariable* Variable_center1;
+   ID3D10EffectVariable* Variable_DeviceSpaceToUserSpace;
+   ID3D10EffectVariable* Variable_diff;
+   ID3D10EffectVariable* Variable_dimensions;
+   ID3D10EffectVariable* Variable_mask;
+   ID3D10EffectVariable* Variable_MaskTexCoords;
+   ID3D10EffectVariable* Variable_QuadDesc;
+   ID3D10EffectVariable* Variable_radius1;
+   ID3D10EffectVariable* Variable_ShadowColor;
+   ID3D10EffectVariable* Variable_sq_radius1;
+   ID3D10EffectVariable* Variable_tex;
+   ID3D10EffectVariable* Variable_TexCoords;
+   ID3D10EffectVariable* Variable_TextColor;
  };
  
  class DrawTargetD2D : public DrawTarget
