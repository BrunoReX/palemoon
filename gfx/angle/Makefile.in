# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is gecko.
#
# The Initial Developer of the Original Code is
#   Mozilla 
# Portions created by the Initial Developer are Copyright (C) 2010
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

MODULE		= angle
LIBRARY_NAME	= angle
LIBXUL_LIBRARY  = 1
ifeq (WINNT,$(OS_TARGET))
VISIBILITY_FLAGS =
endif

EXPORTS_NAMESPACES = angle

EXPORTS_angle = \
	include/GLSLANG/ShaderLang.h \
	$(NULL)

LOCAL_INCLUDES += -I$(srcdir)/include -I$(srcdir)/src

VPATH += $(srcdir)/src
VPATH += $(srcdir)/src/compiler
VPATH += $(srcdir)/src/compiler/preprocessor

CPPSRCS = \
	Compiler.cpp \
        DetectRecursion.cpp \
        InfoSink.cpp \
        Initialize.cpp \
        InitializeDll.cpp \
        Intermediate.cpp \
        intermOut.cpp \
        IntermTraverse.cpp \
        parseConst.cpp \
        ParseHelper.cpp \
        PoolAlloc.cpp \
        QualifierAlive.cpp \
        RemoveTree.cpp \
        ShaderLang.cpp \
        SymbolTable.cpp \
        VariableInfo.cpp \
        compilerdebug.cpp \
        ossource_nspr.cpp \
        util.cpp \
        ValidateLimitations.cpp \
        ForLoopUnroll.cpp \
        MapLongVariableNames.cpp \
        BuiltInFunctionEmulator.cpp \
        $(NULL)

# flex/yacc generated files
CPPSRCS += \
        glslang_lex.cpp \
        glslang_tab.cpp \
        $(NULL)

# GLSL translator backend
CPPSRCS += \
        CodeGenGLSL.cpp \
        OutputGLSL.cpp \
        TranslatorGLSL.cpp \
        VersionGLSL.cpp \
        OutputESSL.cpp \
        OutputGLSLBase.cpp \
        TranslatorESSL.cpp \
	$(NULL)

# Currently, only one or the other
# can be selected.

## HLSL translator backend
##CPPSRCS += \
##	CodeGenHLSL.cpp \
##	OutputHLSL.cpp \
##	TranslatorHLSL.cpp \
##	UnfoldSelect.cpp \
##	SearchSymbol.cpp \
##	$(NULL)

CSRCS   = \
        atom.c \
        cpp.c \
        cppstruct.c \
        memory.c \
        scanner.c \
        symbols.c \
        tokens.c \
	$(NULL)

DEFINES += -DANGLE_USE_NSPR -DANGLE_BUILD -DCOMPILER_IMPLEMENTATION

#these defines are from ANGLE's build_angle.gyp
DEFINES += -DANGLE_DISABLE_TRACE
DEFINES += -DANGLE_COMPILE_OPTIMIZATION_LEVEL=D3DCOMPILE_OPTIMIZATION_LEVEL0

EXTRA_DSO_LDOPTS = $(MOZALLOC_LIB)

ifdef MOZ_ANGLE

# libEGL depends on (links against!) libGLESv2!
DIRS = src/libGLESv2 src/libEGL

libs::
	expand "$(MOZ_D3DX9_CAB)" -F:$(MOZ_D3DX9_DLL) "$(DIST)/bin"
	expand "$(MOZ_D3DCOMPILER_CAB)" -F:$(MOZ_D3DCOMPILER_DLL) "$(DIST)/bin"

endif

include $(topsrcdir)/config/rules.mk

# We have to filter out -pedantic, because of
# comma-at-end-of-enumerator list failures.  We can try to get this fixed
# upstream at some point.
CXXFLAGS := $(filter-out -pedantic,$(CXXFLAGS))
CFLAGS := $(filter-out -pedantic,$(CFLAGS))
