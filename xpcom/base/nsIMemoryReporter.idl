/* -*- Mode: C++; tab-width: 50; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * mozilla.org
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic <vladimir@pobox.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsISimpleEnumerator;

/*
 * An nsIMemoryReporter reports a single memory measurement as an object.
 * Use this when it makes sense to gather this measurement without gathering
 * related measurements at the same time.
 *
 * Note that the |amount| field may be implemented as a function, and so
 * accessing it can trigger significant computation;  the other fields can
 * be accessed without triggering this computation.  (Compare and contrast
 * this with nsIMemoryMultiReporter.)  
 */
[scriptable, uuid(37d18434-9819-4ce1-922f-15d8b63da066)]
interface nsIMemoryReporter : nsISupports
{
  /*
   * The name of the process containing this reporter.  Each reporter initially
   * has "" in this field, indicating that it applies to the current process.
   * (This is true even for reporters in a child process.)  When a reporter
   * from a child process is copied into the main process, the copy has its
   * 'process' field set appropriately.
   */
  readonly attribute string process;

  /*
   * The path that this memory usage should be reported under.  Paths are
   * '/'-delimited, eg. "a/b/c".  There are two categories of paths.
   *
   * - Paths starting with "explicit" represent regions of memory that have
   *   been explicitly allocated with an OS-level allocation (eg.
   *   mmap/VirtualAlloc/vm_allocate) or a heap-level allocation (eg.
   *   malloc/calloc/operator new).
   *
   *   Each reporter can be viewed as representing a node in a tree rooted at
   *   "explicit".  Not all nodes of the tree need have an associated reporter.
   *   So, for example, the reporters "explicit/a/b", "explicit/a/c",
   *   "explicit/d", "explicit/d/e", and "explicit/d/f" define this tree:
   *
   *     explicit
   *     |--a
   *     |  |--b [*]
   *     |  \--c [*]
   *     \--d [*]
   *        |--e [*]
   *        \--f [*]
   *
   *   Nodes marked with a [*] have a reporter.  Notice that "explicit/a" is
   *   implicitly defined.
   *
   *   A node's children divide their parent's memory into disjoint pieces.
   *   So in the example above, |a| may not count any allocations counted by
   *   |d|, and vice versa.
   *
   * - All other paths represent cross-cutting values and may overlap with any
   *   other reporter.
   */
  readonly attribute string path;

  /*
   * There are three categories of memory reporters:
   *
   *  - MAPPED: memory allocated directly by the OS, e.g. by calling mmap,
   *    VirtualAlloc, or vm_allocate.  Reporters in this category must have
   *    units UNITS_BYTES and must have a path starting with "explicit".
   *
   *  - HEAP: memory allocated by the heap allocator, e.g. by calling malloc,
   *    calloc, realloc, memalign, operator new, or operator new[].  Reporters
   *    in this category must have units UNITS_BYTES and must have a path
   *    starting with "explicit".
   *
   *  - OTHER: reporters which don't fit into either of these categories. Such
   *    reporters must have a path that does not start with "explicit" and may
   *    have any units.
   */
  const PRInt32 KIND_MAPPED = 0;
  const PRInt32 KIND_HEAP   = 1;
  const PRInt32 KIND_OTHER  = 2;

  /*
   * The reporter kind.  See KIND_* above.
   */
  readonly attribute PRInt32 kind;

  /*
   * The amount reported by a memory reporter may have one of the following
   * units, but you may of course add new units as necessary:
   *
   *  - BYTES: The amount contains a number of bytes.
   *
   *  - COUNT: The amount contains the cumulative number of times some event
   *    has occurred since the application started up.  For instance, a
   *    reporter reporting the number of page faults since startup should have
   *    units UNITS_COUNT.
   */
  const PRInt32 UNITS_BYTES = 0;
  const PRInt32 UNITS_COUNT = 1;

  /*
   * The units on the reporter's amount.  See UNITS_* above.
   */
  readonly attribute PRInt32 units;

  /*
   * The numeric value reported by this memory reporter.
   */
  readonly attribute PRInt64 amount;

  /*
   * A human-readable description of this memory usage report.
   */
  readonly attribute string description;
};

[scriptable, function, uuid(5b15f3fa-ba15-443c-8337-7770f5f0ce5d)]
interface nsIMemoryMultiReporterCallback : nsISupports
{
  void callback(in ACString process, in AUTF8String path, in PRInt32 kind,
                in PRInt32 units, in PRInt64 amount,
                in AUTF8String description, in nsISupports closure);
};

/*
 * An nsIMemoryMultiReporter reports multiple memory measurements via a
 * callback function which is called once for each measurement.  Use this
 * when you want to gather multiple measurements in a single operation (eg.
 * a single traversal of a large data structure).
 *
 * The arguments to the callback deliberately match the fields in
 * nsIMemoryReporter, but note that seeing any of these arguments requires
 * calling collectReports which will trigger all relevant computation.
 * (Compare and contrast this with nsIMemoryReporter, which allows all
 * fields except |amount| to be accessed without triggering computation.)
 */
[scriptable, uuid(eae277ad-b67d-4389-95f4-03fa11c09d06)]
interface nsIMemoryMultiReporter : nsISupports
{
  void collectReports(in nsIMemoryMultiReporterCallback callback,
                      in nsISupports closure);
};

[scriptable, uuid(80a93b4c-6fff-4acd-8598-3891074a30ab)]
interface nsIMemoryReporterManager : nsISupports
{
  /*
   * Return an enumerator of nsIMemoryReporters that are currently registered.
   */
  nsISimpleEnumerator enumerateReporters ();

  /*
   * Return an enumerator of nsIMemoryMultiReporters that are currently
   * registered.
   */
  nsISimpleEnumerator enumerateMultiReporters ();

  /*
   * Register the given nsIMemoryReporter.  After a reporter is registered,
   * it will be available via enumerateReporters().  The Manager service
   * will hold a strong reference to the given reporter.
   */
  void registerReporter (in nsIMemoryReporter reporter);

  /*
   * Register the given nsIMemoryMultiReporter.  After a multi-reporter is
   * registered, it will be available via enumerateMultiReporters().  The
   * Manager service will hold a strong reference to the given
   * multi-reporter.
   */
  void registerMultiReporter (in nsIMemoryMultiReporter reporter);

  /*
   * Unregister the given memory reporter.
   */
  void unregisterReporter (in nsIMemoryReporter reporter);

  /*
   * Unregister the given memory multi-reporter.
   */
  void unregisterMultiReporter (in nsIMemoryMultiReporter reporter);

  /*
   * Initialize.
   */
  void init ();
};

%{C++

/*
 * Note that this defaults 'process' to "", which is usually what's desired.
 */
#define NS_MEMORY_REPORTER_IMPLEMENT(_classname, _path, _kind, _units, _usageFunction, _desc) \
    class MemoryReporter_##_classname : public nsIMemoryReporter {                            \
    public:                                                                                   \
      NS_DECL_ISUPPORTS                                                                       \
      NS_IMETHOD GetProcess(char **process) { *process = strdup(""); return NS_OK; }          \
      NS_IMETHOD GetPath(char **memoryPath) { *memoryPath = strdup(_path); return NS_OK; }    \
      NS_IMETHOD GetKind(int *kind) { *kind = _kind; return NS_OK; }                          \
      NS_IMETHOD GetUnits(int *units) { *units = _units; return NS_OK; }                      \
      NS_IMETHOD GetAmount(PRInt64 *amount) { *amount = _usageFunction(); return NS_OK; }     \
      NS_IMETHOD GetDescription(char **desc) { *desc = strdup(_desc); return NS_OK; }         \
    };                                                                                        \
    NS_IMPL_ISUPPORTS1(MemoryReporter_##_classname, nsIMemoryReporter)

#define NS_MEMORY_REPORTER_NAME(_classname)  MemoryReporter_##_classname

NS_COM nsresult NS_RegisterMemoryReporter (nsIMemoryReporter *reporter);
NS_COM nsresult NS_RegisterMemoryMultiReporter (nsIMemoryMultiReporter *reporter);

NS_COM nsresult NS_UnregisterMemoryReporter (nsIMemoryReporter *reporter);
NS_COM nsresult NS_UnregisterMemoryMultiReporter (nsIMemoryMultiReporter *reporter);

%}
