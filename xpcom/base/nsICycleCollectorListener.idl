/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is XPCOM cycle collector.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * Interface to pass to the cycle collector to get information about the CC
 * graph while it's being built. The order of calls will be call to begin();
 * then for every node in the graph a call to noteObject() and calls to
 * noteEdge() for every edge starting at that node; then a call to
 * beginDescriptions(); then for every black node in the CC graph a call to
 * either describeRefcountedObject() or to describeGCedObject(); and then a
 * call to end(). If begin() returns an error none of the other functions will
 * be called.
 */
[scriptable, uuid(194b749a-4ceb-4dd1-928d-d30b5f14c23e)]
interface nsICycleCollectorListener : nsISupports
{
    void begin();
    void noteObject(in unsigned long long aAddress,
                    in string aObjectDescription);
    void noteEdge(in unsigned long long aFromAddress,
                  in unsigned long long aToAddress,
                  in string aEdgeName);
    void beginDescriptions();
    void describeRefcountedObject(in unsigned long long aAddress,
                                  in unsigned long aKnownEdges,
                                  in unsigned long aTotalEdges);
    void describeGCedObject(in unsigned long long aAddress, in boolean aMarked);
    void end();
};
