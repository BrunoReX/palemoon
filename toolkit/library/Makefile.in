#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Benjamin Smedberg <benjamin@smedbergs.us>
# Portions created by the Initial Developer are Copyright (C) 1998
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

ifdef MOZ_RDF
include $(topsrcdir)/rdf/util/src/objs.mk
endif
include $(topsrcdir)/intl/unicharutil/util/objs.mk

MODULE = libxul
LIBRARY_NAME = xul
FORCE_USE_PIC = 1
FORCE_SHARED_LIB = 1
MOZILLA_INTERNAL_API = 1

ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
# This is going to be a framework named "XUL", not an ordinary library named
# "libxul.dylib"
LIBRARY_NAME=XUL
# Setting MAKE_FRAMEWORK makes DLL_PREFIX and DLL_SUFFIX be ignored when
# setting SHARED_LIBRARY; we need to leave DLL_PREFIX and DLL_SUFFIX
# as-is so that dependencies of the form -ltracemalloc still work.
MAKE_FRAMEWORK=1
endif

VPATH += $(topsrcdir)/build/
CPPSRCS += $(STDCXX_COMPAT)

ifeq ($(OS_ARCH)_$(GNU_CC),WINNT_)
CPPSRCS += dlldeps-xul.cpp
endif

ifeq ($(OS_ARCH),OS2)
CPPSRCS += dlldeps-xul.cpp
endif

ifneq (,$(MOZ_ENABLE_GTK2))
DEFINES += -DMOZ_ENABLE_GTK2
endif

SHARED_LIBRARY_LIBS += \
	$(DEPTH)/toolkit/xre/$(LIB_PREFIX)xulapp_s.$(LIB_SUFFIX) \
	$(NULL)

SHARED_LIBRARY_LIBS += \
	$(foreach component,$(COMPONENT_LIBS),$(DEPTH)/staticlib/components/$(LIB_PREFIX)$(component).$(LIB_SUFFIX)) \
	$(foreach lib,$(STATIC_LIBS),$(DEPTH)/staticlib/$(LIB_PREFIX)$(lib).$(LIB_SUFFIX)) \
	$(NULL)

include $(srcdir)/libxul-config.mk

EXTRA_DEPS += \
	$(srcdir)/libxul-config.mk \
	$(srcdir)/libxul-rules.mk \
	$(topsrcdir)/intl/unicharutil/util/objs.mk \
	$(NULL)


CPPSRCS += \
	$(INTL_UNICHARUTIL_UTIL_LCPPSRCS) \
	$(NULL)

GARBAGE	+= \
	$(INTL_UNICHARUTIL_UTIL_LCPPSRCS) \
	$(wildcard *.$(OBJ_SUFFIX)) \
	dlldeps-javaxpcom.cpp \
	$(NULL)

LOCAL_INCLUDES += -I$(topsrcdir)/intl/unicharutil/util \
  -I$(topsrcdir)/intl/unicharutil/src

ifdef MOZ_RDF
EXTRA_DEPS += \
	$(topsrcdir)/rdf/util/src/objs.mk \
	$(NULL)


CPPSRCS += \
	$(RDF_UTIL_SRC_LCPPSRCS) \
	$(NULL)

GARBAGE += \
	$(RDF_UTIL_SRC_LCPPSRCS) \
	$(NULL)
endif

ifneq (,$(filter OS2 WINNT,$(OS_ARCH)))
SDK_LIBRARY = $(IMPORT_LIBRARY)
else
SDK_LIBRARY = $(SHARED_LIBRARY)
endif

# See bug 653662 - some builders are hitting an internal size limit
# on incremental builds. Disable this for debug builds for now. We may
# be able to revisit this after our builders are upgraded to something
# later than Visual Studio 2005.
ifeq ($(OS_ARCH),WINNT)
ifdef MOZ_DEBUG
EXTRA_DSO_LDOPTS += -INCREMENTAL:NO
endif
endif

EXTRA_DSO_LDOPTS += $(LIBS_DIR) $(EXTRA_DSO_LIBS)

DEFINES += -DIMPL_XREAPI

EXTRA_DSO_LDOPTS += $(NSPR_LIBS) $(MOZALLOC_LIB)

ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
CXXFLAGS	+= $(TK_CFLAGS)
OS_LIBS += \
	-framework SystemConfiguration \
	-framework QuickTime \
	-framework IOKit \
	-F/System/Library/PrivateFrameworks -framework CoreUI \
	$(TK_LIBS) \
	$(NULL)
endif

ifeq ($(OS_ARCH),Darwin)
ifdef MOZ_SYDNEYAUDIO
EXTRA_DSO_LDOPTS += \
	-framework Carbon \
	-framework CoreAudio \
	-framework AudioToolbox \
	-framework AudioUnit \
	-framework IOKit \
	-framework Foundation \
	-framework AppKit \
	$(NULL)
endif
endif

ifneq (,$(filter NetBSD OpenBSD,$(OS_ARCH)))
ifdef MOZ_SYDNEYAUDIO
EXTRA_DSO_LDOPTS += -lossaudio
endif
endif

ifdef MOZ_PLATFORM_MAEMO
EXTRA_DSO_LDOPTS += $(MOZ_PLATFORM_MAEMO_LIBS)
endif 

ifdef MOZ_ENABLE_LIBCONIC
EXTRA_DSO_LDOPTS += $(LIBCONIC_LIBS)
endif

ifdef MOZ_ENABLE_DBUS
EXTRA_DSO_LDOPTS += $(MOZ_DBUS_LIBS)
ifdef MOZ_PLATFORM_MAEMO
EXTRA_DSO_LDOPTS += $(MOZ_DBUS_GLIB_LIBS)
endif
endif

ifeq (gtk2,$(MOZ_WIDGET_TOOLKIT))
EXTRA_DSO_LDOPTS += $(XLDFLAGS) $(XLIBS) $(XEXT_LIBS) $(XCOMPOSITE_LIBS) $(MOZ_PANGO_LIBS) $(MOZ_GTK2_LIBS) $(XT_LIBS) -lgthread-2.0
EXTRA_DSO_LDOPTS += $(FT2_LIBS)
endif

ifeq (qt,$(MOZ_WIDGET_TOOLKIT))
EXTRA_DSO_LDOPTS += $(XLDFLAGS) $(XLIBS) $(XT_LIBS) $(MOZ_QT_LIBS) -lgthread-2.0
EXTRA_DSO_LDOPTS += $(FT2_LIBS) $(MOZ_PANGO_LIBS)
endif

ifdef MOZ_TREE_FREETYPE
ifndef MOZ_TREE_CAIRO
EXTRA_DSO_LDOPTS += $(FT2_LIBS)
endif
endif

ifdef MOZ_ENABLE_STARTUP_NOTIFICATION
EXTRA_DSO_LDOPTS += $(MOZ_STARTUP_NOTIFICATION_LIBS)
endif

ifdef MOZ_ENABLE_LIBPROXY
EXTRA_DSO_LDOPTS += $(MOZ_LIBPROXY_LIBS)
endif

ifeq ($(OS_ARCH),SunOS)
ifdef GNU_CC
EXTRA_DSO_LDOPTS += -lelf
else
EXTRA_DSO_LDOPTS += -lelf -ldemangle
endif
endif

ifeq ($(OS_ARCH),WINNT)
OS_LIBS += $(call EXPAND_LIBNAME,shell32 ole32 uuid version winspool comdlg32 imm32 winmm wsock32 msimg32 shlwapi psapi ws2_32 dbghelp)
ifneq (,$(MOZ_DEBUG)$(NS_TRACE_MALLOC))
OS_LIBS += $(call EXPAND_LIBNAME,imagehlp)
endif
ifdef MOZ_CRASHREPORTER
OS_LIBS += $(call EXPAND_LIBNAME,wininet)
endif
endif # WINNT

ifdef MOZ_JPROF
EXTRA_DSO_LDOPTS += -ljprof
endif

ifdef MOZ_ENABLE_QT
EXTRA_DSO_LDOPTS += $(MOZ_QT_LDFLAGS) $(XEXT_LIBS)
endif

include $(topsrcdir)/config/rules.mk

export:: $(RDF_UTIL_SRC_CPPSRCS) $(INTL_UNICHARUTIL_UTIL_CPPSRCS)
	$(INSTALL) $^ .

include $(srcdir)/libxul-rules.mk

ifeq ($(OS_ARCH),OpenBSD)
# Needed by nsAuthGSSAPI
EXTRA_DSO_LDOPTS += -lkrb5 -lcrypto
endif

ifdef MOZ_JAVAXPCOM
dlldeps-javaxpcom.cpp: $(topsrcdir)/extensions/java/xpcom/src/dlldeps-javaxpcom.cpp
	$(INSTALL) $^ .
endif

ifdef MOZ_DEBUG
ifdef ENABLE_TESTS
DEFINES += -DENABLE_LAYOUTDEBUG
endif
endif
