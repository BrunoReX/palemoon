/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Url Classifier code.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Gian-Carlo Pascutto <gpascutto@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIFile.idl"

interface nsIArray;

// Note that the PrefixSet name is historical and we do properly support
// duplicated values, so it's really a Prefix Trie.
// All methods are thread-safe.

[scriptable, uuid(519c8519-0f30-426b-bb7b-c400ba0318e2)]
interface nsIUrlClassifierPrefixSet : nsISupports
{
  // Fills the PrefixSet with the given array of prefixes.
  // Can send an empty Array to clear the tree. A truly "empty tree"
  // cannot be represented, so put a sentinel value if that is required
  // Requires array to be sorted.
  void setPrefixes([const, array, size_is(aLength)] in unsigned long aPrefixes,
                   in unsigned long aLength);
  // Do a lookup in the PrefixSet, return whether the value is present.
  // If aReady is set, we will block until there are any entries.
  // If not set, we will return in aReady whether we were ready or not.
  boolean probe(in unsigned long aPrefix, in unsigned long aKey,
                inout boolean aReady);
  // Return the key that is used to randomize the collisions in the prefixes.
  PRUint32 getKey();
  boolean isEmpty();
  void loadFromFile(in nsIFile aFile);
  void storeToFile(in nsIFile aFile);
};
