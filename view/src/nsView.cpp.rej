***************
*** 1022,1054 ****
    }
  
    return false;
  }
  
  void
  nsView::WillPaintWindow(nsIWidget* aWidget, bool aWillSendDidPaint)
  {
-   mViewManager->WillPaintWindow(aWidget, aWillSendDidPaint);
  }
  
  bool
  nsView::PaintWindow(nsIWidget* aWidget, nsIntRegion aRegion, uint32_t aFlags)
  {
    mInAlternatePaint = aFlags & PAINT_IS_ALTERNATE;
    nsCOMPtr<nsViewManager> vm = mViewManager;
    bool result = vm->PaintWindow(aWidget, aRegion, aFlags);
    mInAlternatePaint = false;
    return result;
  }
  
  void
  nsView::DidPaintWindow()
  {
-   mViewManager->DidPaintWindow();
  }
  
  nsEventStatus
  nsView::HandleEvent(nsGUIEvent* aEvent, bool aUseAttachedEvents)
  {
    NS_PRECONDITION(nullptr != aEvent->widget, "null widget ptr");
  
    nsEventStatus result = nsEventStatus_eIgnore;
--- 1022,1056 ----
    }
  
    return false;
  }
  
  void
  nsView::WillPaintWindow(nsIWidget* aWidget, bool aWillSendDidPaint)
  {
+   nsCOMPtr<nsViewManager> vm = mViewManager;
+   vm->WillPaintWindow(aWidget, aWillSendDidPaint);
  }
  
  bool
  nsView::PaintWindow(nsIWidget* aWidget, nsIntRegion aRegion, uint32_t aFlags)
  {
    mInAlternatePaint = aFlags & PAINT_IS_ALTERNATE;
    nsCOMPtr<nsViewManager> vm = mViewManager;
    bool result = vm->PaintWindow(aWidget, aRegion, aFlags);
    mInAlternatePaint = false;
    return result;
  }
  
  void
  nsView::DidPaintWindow()
  {
+   nsCOMPtr<nsViewManager> vm = mViewManager;
+   vm->DidPaintWindow();
  }
  
  nsEventStatus
  nsView::HandleEvent(nsGUIEvent* aEvent, bool aUseAttachedEvents)
  {
    NS_PRECONDITION(nullptr != aEvent->widget, "null widget ptr");
  
    nsEventStatus result = nsEventStatus_eIgnore;
