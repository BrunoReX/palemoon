/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * David Einstein.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jesper Kristensen <mail@jesperkristensen.dk>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIFile;
interface mozIPersonalDictionary;

[scriptable, uuid(8ba643a4-7ddc-4662-b976-7ec123843f10)]

/**
 * This interface represents a SpellChecker.
 */

interface mozISpellCheckingEngine : nsISupports {
  /**
   * The name of the current dictionary. Is either a value from
   * getDictionaryList or the empty string if no dictionary is selected.
   * Setting this attribute to a value not in getDictionaryList will throw
   * NS_ERROR_FILE_NOT_FOUND.
   *
   * The spellcheck engine will send a notification with
   * "spellcheck-dictionary-update" as topic when this changes.
   * If the dictionary is changed to no dictionary (the empty string), an
   * observer is allowed to set another dictionary before it returns.
   */
  attribute wstring dictionary;

  /**
   * The language this spellchecker is using when checking
   *
   * The spellcheck engine will send a notification with
   * "spellcheck-dictionary-update" as topic when this changes.
   */
  readonly attribute wstring language;

  /**
   * Does the engine provide its own personal dictionary?
   */
  readonly attribute boolean providesPersonalDictionary;

  /**
   * Does the engine provide its own word utils?
   */
  readonly attribute boolean providesWordUtils;

  /**
   * The name of the engine
   */
  readonly attribute wstring name;

  /** 
   * a string indicating the copyright of the engine
   */
  readonly attribute wstring copyright;

  /**
   * the personal dictionary
   */
  attribute mozIPersonalDictionary personalDictionary;

  /**
   * Get the list of dictionaries
   */
  void getDictionaryList([array, size_is(count)] out wstring dictionaries, out PRUint32 count);

  /**
   * check a word
   *
   * The spellcheck engine will send a notification with
   * "spellcheck-dictionary-update" as topic when this changes.
   */
  boolean check(in wstring word);

  /**
   * get a list of suggestions for a misspelled word
   *
   * The spellcheck engine will send a notification with
   * "spellcheck-dictionary-update" as topic when this changes.
   */
  void suggest(in wstring word,[array, size_is(count)] out wstring suggestions, out PRUint32 count);

  /**
   * Load dictionaries from the specified dir
   */
  void loadDictionariesFromDir(in nsIFile dir);

  /**
   * Add dictionaries from a directory to the spell checker
   */
  void addDirectory(in nsIFile dir);

  /**
   * Remove dictionaries from a directory from the spell checker
   */
  void removeDirectory(in nsIFile dir);
};

%{C++
#define DICTIONARY_SEARCH_DIRECTORY "DictD"
#define DICTIONARY_SEARCH_DIRECTORY_LIST "DictDL"

#define SPELLCHECK_DICTIONARY_UPDATE_NOTIFICATION \
  "spellcheck-dictionary-update"
%}
