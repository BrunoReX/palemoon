# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

os_win = 0
os_posix = 0
os_macosx = 0
os_dragonfly = 0
os_freebsd = 0
os_netbsd = 0
os_openbsd = 0
os_bsd = 0
os_linux = 0

if CONFIG['OS_ARCH'] == 'WINNT':
    os_win = 1
else:
    os_posix = 1
    if CONFIG['OS_ARCH'] == 'Darwin':
        os_macosx = 1
    elif CONFIG['OS_ARCH'] == 'DragonFly':
        os_dragonfly = 1
        os_bsd = 1
    elif CONFIG['OS_ARCH'] in ['FreeBSD', 'GNU_kFreeBSD']:
        os_freebsd = 1
        os_bsd = 1
    elif CONFIG['OS_ARCH'] == 'NetBSD':
        os_netbsd = 1
        os_bsd = 1
    elif CONFIG['OS_ARCH'] == 'OpenBSD':
        os_openbsd = 1
        os_bsd = 1
    else:
        os_linux = 1

CPP_SOURCES += [
    'at_exit.cc',
    'base_paths.cc',
    'base_switches.cc',
    'child_process.cc',
    'child_process_host.cc',
    'child_process_info.cc',
    'child_thread.cc',
    'chrome_counters.cc',
    'chrome_paths.cc',
    'chrome_switches.cc',
    'command_line.cc',
    'debug_flags.cc',
    'debug_util.cc',
    'env_vars.cc',
    'file_path.cc',
    'file_util.cc',
    'histogram.cc',
    'ipc_channel_proxy.cc',
    'ipc_logging.cc',
    'ipc_message.cc',
    'ipc_sync_channel.cc',
    'ipc_sync_message.cc',
    'lazy_instance.cc',
    'lock.cc',
    'logging.cc',
    'memory_debug.cc',
    'message_loop.cc',
    'message_pump_default.cc',
    'message_router.cc',
    'non_thread_safe.cc',
    'notification_service.cc',
    'path_service.cc',
    'pickle.cc',
    'rand_util.cc',
    'ref_counted.cc',
    'revocable_store.cc',
    'scoped_temp_dir.cc',
    'simple_thread.cc',
    'stats_table.cc',
    'string_escape.cc',
    'string_piece.cc',
    'string_util.cc',
    'system_monitor.cc',
    'task_queue.cc',
    'thread.cc',
    'thread_collision_warner.cc',
    'time.cc',
    'timer.cc',
    'trace_event.cc',
    'tracked.cc',
    'tracked_objects.cc',
]

if os_win:
    CPP_SOURCES += [
        'base_paths_win.cc',
        'cpu.cc',
        'condition_variable_win.cc',
        'debug_util_win.cc',
        'event_recorder.cc',
        'file_util_win.cc',
        'file_version_info.cc',
        'lock_impl_win.cc',
        'idle_timer.cc',
        'message_pump_win.cc',
        'object_watcher.cc',
        'platform_file_win.cc',
        'platform_thread_win.cc',
        'process_util_win.cc',
        'process_win.cc',
        'rand_util_win.cc',
        'registry.cc',
        'shared_memory_win.cc',
        'sys_info_win.cc',
        'sys_string_conversions_win.cc',
        'system_monitor_win.cc',
        'thread_local_storage_win.cc',
        'thread_local_win.cc',
        'time_win.cc',
        'waitable_event_watcher_win.cc',
        'waitable_event_win.cc',
        'win_util.cc',
        'chrome_paths_win.cc',
        'chrome_constants.cc',
        'ipc_channel_win.cc',
        'process_watcher_win.cc',
        'transport_dib_win.cc',
    ]

if os_posix:
    CPP_SOURCES += [
        'condition_variable_posix.cc',
        'debug_util_posix.cc',
        'event_recorder_stubs.cc',
        'file_descriptor_shuffle.cc',
        'file_util_posix.cc',
        'lock_impl_posix.cc',
        'message_pump_libevent.cc',
        'platform_file_posix.cc',
        'platform_thread_posix.cc',
        'process_posix.cc',
        'process_util_posix.cc',
        'rand_util_posix.cc',
        'shared_memory_posix.cc',
        'string16.cc',
        'system_monitor_posix.cc',
        'sys_info_posix.cc',
        'thread_local_posix.cc',
        'thread_local_storage_posix.cc',
        'waitable_event_posix.cc',
        'waitable_event_watcher_posix.cc',
        'file_descriptor_set_posix.cc',
        'ipc_channel_posix.cc',
        'process_watcher_posix_sigchld.cc',
    ]
    if CONFIG['OS_TARGET'] == 'Android':
        CPP_SOURCES += [
            'message_pump_android.cc',
        ]

if os_macosx:
    CPP_SOURCES += [
        'debug_util_mac.cc',
        'hmac_mac.cc',
        'idle_timer.cc',
        'sys_info_mac.cc',
        'time_mac.cc',
        'mach_message_source_mac.cc',
        'transport_dib_mac.cc',
    ]

if os_linux:
    CPP_SOURCES += [
        'atomicops_internals_x86_gcc.cc',
        'base_paths_linux.cc',
        'file_version_info_linux.cc',
        'idle_timer_none.cc',
        'process_util_linux.cc',
        'time_posix.cc',
    ]
    if CONFIG['MOZ_WIDGET_GTK']:
        CPP_SOURCES += [
            'message_pump_glib.cc',
        ]
    if CONFIG['MOZ_ENABLE_QT']:
        CPP_SOURCES += [
            'moc_message_pump_qt.cc',
            'message_pump_qt.cc',
        ]

if os_bsd:
    CPP_SOURCES += [
        'atomicops_internals_x86_gcc.cc',
        'time_posix.cc',
    ]
    if CONFIG['OS_ARCH'] == 'GNU_kFreeBSD':
        CPP_SOURCES += ['process_util_linux.cc']
    else:
        CPP_SOURCES += ['process_util_bsd.cc']
    if CONFIG['MOZ_WIDGET_GTK']:
        CPP_SOURCES += [
            'message_pump_glib.cc',
        ]
    if CONFIG['MOZ_ENABLE_QT']:
        CPP_SOURCES += [
            'moc_message_pump_qt.cc',
            'message_pump_qt.cc',
        ]

if CONFIG['_MSC_VER']:
    CPP_SOURCES += [
        'debug_on_start.cc',
    ]

ost = CONFIG['OS_TEST']
if ost.find('86') == -1 and ost.find('arm') == -1 and ost.find('mips') == -1:
    CPP_SOURCES += [
        'atomicops_internals_mutex.cc',
    ]
