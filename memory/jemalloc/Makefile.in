#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Mozilla Foundation
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#  Ted Mielczarek <ted.mielczarek@gmail.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

MODULE		= jemalloc

# jemalloc.c properly uses 'static', so don't burden it with manually exposing
# symbols.
VISIBILITY_FLAGS=

ifeq (WINNT,$(OS_TARGET))
ifdef WIN32_OLD_STYLE_JEMALLOC
# Building the CRT from source
CRT_OBJ_DIR = $(CURDIR)/crtsrc
MOZ_CRT_DLL_NAME = mozcrt19
MOZ_CRTCPP_DLL_NAME = mozcpp19
MOZ_CRT_STATIC_LIBS = libcmt libcpmt
MOZ_CRT_DLL = $(CRT_OBJ_DIR)/build/$(MOZ_CRT_CPU_ARCH)/$(MOZ_CRT_DLL_NAME).dll
MOZ_CRT_IMPORT_LIB = $(CRT_OBJ_DIR)/build/$(MOZ_CRT_CPU_ARCH)/$(MOZ_CRT_DLL_NAME).lib
MOZ_CRTCPP_DLL = $(CRT_OBJ_DIR)/build/$(MOZ_CRT_CPU_ARCH)/$(MOZ_CRTCPP_DLL_NAME).dll
MOZ_CRTCPP_IMPORT_LIB = $(CRT_OBJ_DIR)/build/$(MOZ_CRT_CPU_ARCH)/$(MOZ_CRTCPP_DLL_NAME).lib

# copy the CRT DLLs to dist/bin,
# copy the import libs to dist/lib
libs:: $(MOZ_CRT_DLL) $(MOZ_CRT_IMPORT_LIB)
	$(INSTALL) $(MOZ_CRT_DLL) $(MOZ_CRTCPP_DLL) $(FINAL_TARGET)
	$(INSTALL) $(MOZ_CRT_IMPORT_LIB) $(MOZ_CRTCPP_IMPORT_LIB) $(DIST)/lib

$(MOZ_CRT_IMPORT_LIB): $(MOZ_CRT_DLL)

define EXTRACT_CMD
cd $(CRT_OBJ_DIR)/$(MOZ_CRT_CPU_ARCH)/$(i)_lib && lib "-extract:..\\build\\$(MOZ_CRT_CPU_ARCH)\\$(i)_obj\\unhandld.obj" eh.lib

endef # don't touch the blank line. actually, don't touch anything in this file.

# patch if necessary
ifeq ($(CC_VERSION), 14.00.50727.762)
CRTDIFF=crtvc8sp1-$(MOZ_CRT_CPU_ARCH).diff
else
CRTDIFF=crtvc9sp1-$(MOZ_CRT_CPU_ARCH).diff
endif

$(CRT_OBJ_DIR)/jemalloc.c: $(srcdir)/$(CRTDIFF)
	rm -rf $(CRT_OBJ_DIR)
	cp -R "$(WIN32_CRT_SRC_DIR)" $(CRT_OBJ_DIR)
# per http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1189363&SiteID=1
	$(foreach i,dll mt xdll xmt,$(EXTRACT_CMD))
# truly awful
#XXX: get ed into mozillabuild, bug 415123
	$(PERL) $(srcdir)/apply-ed-patches.pl $(srcdir)/$(CRTDIFF) \
	$(CRT_OBJ_DIR) $(srcdir)/ed.exe

$(MOZ_CRT_DLL): \
  $(CRT_OBJ_DIR)/jemalloc.c $(srcdir)/jemalloc.c $(srcdir)/jemalloc.h \
  $(srcdir)/jemalloc_types.h $(srcdir)/rb.h
	cp $(srcdir)/jemalloc.c $(srcdir)/jemalloc.h $(srcdir)/jemalloc_types.h $(srcdir)/rb.h \
	$(CRT_OBJ_DIR)
# this pretty much sucks, but nmake and make don't play well together
	$(PYTHON) $(srcdir)/build-crt.py $(CRT_OBJ_DIR)
# XXX: these don't link right for some reason; the problem is likely
# that  not all the standard symbols are exported; looks like MSFT
# never updated the sample.def files; could probably fix if someone
# were ever bored enough. :-)
	rm -f $(addsuffix .lib, $(addprefix $(CRT_OBJ_DIR)/build/$(MOZ_CRT_CPU_ARCH)/, $(MOZ_CRT_STATIC_LIBS)))
	rm -f $(addsuffix .pdb, $(addprefix $(CRT_OBJ_DIR)/build/$(MOZ_CRT_CPU_ARCH)/, $(MOZ_CRT_STATIC_LIBS)))

# but still export jemalloc.h
EXPORTS = jemalloc.h jemalloc_types.h

else

CSRCS = jemalloc.c
EXPORTS = jemalloc.h jemalloc_types.h
LIBRARY_NAME = jemalloc
FORCE_SHARED_LIB = 1

MOZ_MEMORY_LDFLAGS = # Don't link against ourselves

DEFFILE = $(srcdir)/jemalloc.def

LDFLAGS += -ENTRY:DllMain

NO_INSTALL_IMPORT_LIBRARY = 1

endif
else # Not Windows

ifeq ($(OS_ARCH),SunOS)
ifndef GNU_CC
MODULE_OPTIMIZE_FLAGS = -xO5
endif
endif

LIBRARY_NAME	= jemalloc

# Build jemalloc as a shared lib.  This is mandatory for Darwin, since a library
# init function is used on that platform.
ifeq ($(OS_ARCH),Darwin)
FORCE_SHARED_LIB= 1
else
DIST_INSTALL = 1
FORCE_STATIC_LIB= 1
endif

EXPORTS = jemalloc.h jemalloc_types.h
CSRCS   = jemalloc.c

#XXX: PGO on Linux causes problems here
# See bug 419470
NO_PROFILE_GUIDED_OPTIMIZE = 1
endif

ifdef WRAP_MALLOC_CFLAGS
DEFINES += -DWRAP_MALLOC
endif

include $(topsrcdir)/config/rules.mk

ifeq (Darwin,$(OS_TARGET))
LDFLAGS += -init _jemalloc_darwin_init
endif

ifeq (WINNT,$(OS_TARGET))
ifndef WIN32_OLD_STYLE_JEMALLOC

# Roll our own custom logic here for the import library

###############################################################################
#
# Linking Mozilla itself to jemalloc is not particularly difficult.  To do this
# we avoid linking directly to the Microsoft-provided CRT import libraries.
# Instead, we link to our own import library which we generate here.  To
# replace the CRT's malloc/free/other memory management symbols we export
# our own versions out of jemalloc.dll.  We then take the import library that
# the compiler generates for jemalloc.dll and combine it with the MS CRT import
# libraries.  We put our library on the command line first, and the CRT symbols
# are discarded in favor of our versions!
#
# Unfortunately that was too easy.  The CRT import library is not a standard
# import library that contains a list of symbols and whatnot.  It also includes
# object files that are linked into generated programs.  One of these,
# crtdll.obj is (as one might expect) linked into all DLLs that link against
# the CRT.  This file does things like run static C++ constructors when the
# DLL is attached, call DllMain, etc.
#
# In the CRT source all malloc/free calls are made to malloc_crt and free_crt.
# In debug builds these are both defined to malloc_dbg and free_dbg.  In opt
# builds malloc_crt is an actual function, implemented and exposed from the
# CRT.  free_crt is, however, defined to be just plain old free.  This works
# fine inside the CRT where malloc_crt and free operate on the same heap.
# Outside the CRT malloc_crt is in the CRT's heap, but free is in jemalloc's
# heap.  This causes much pain at shutdown :-(
#
# The obvious solution here is to override malloc_crt too.  Unfortunately,
# that doesn't work because the CRT expects to be able to call msize on this
# piece of memory deep inside the CRT, which will fail because it'll call the
# CRT's msize on a pointer in jemalloc's heap.
#
# Our solution to this is quite devious.  We take apart the CRT's import lib
# and remove the problematic object file.  We then poke at the object file's
# symbol table and replace '__imp__free' (which means grab free from some
# other DLL) with '__imp__frex'.  Then we define our own dummy no-op function
# in jemalloc.dll and export it as frex.  Then we put the CRT import lib
# back together with the patched crtdll.obj, glue it to the end of jemalloc's
# import library and link the rest of Mozilla to that.
#
# The result?  A binary that uses jemalloc, doesn't crash, and leaks a tiny
# amount of memory (32 words per DLL in the 2010 CRT) at shutdown.
#
###############################################################################

libs:: mozcrt.lib
	$(INSTALL) $(IFLAGS2) mozcrt.lib $(DIST)/lib

# And finally combine that with the jemalloc import library to get an import
# library that has our malloc/free/etc and the CRT's everything else
mozcrt.lib: $(IMPORT_LIBRARY) msvc_modified.lib
	lib -OUT:$@ $^

# Put the fixed object file back in
msvc_modified.lib: msvc_removed.lib crtdll_fixed.obj
	lib -OUT:$@ $^

# Fix the object file
crtdll_fixed.obj: crtdll.obj
	$(PYTHON) $(srcdir)/fixcrt.py

# Find the path of crtdll.obj
CRTDLL_FULLPATH=$(subst \,\\,$(shell lib -list msvc_combined.lib | grep crtdll\\.obj))

# Remove the broken object file, only after we have extracted it
msvc_removed.lib: msvc_combined.lib crtdll.obj
	lib -OUT:$@ msvc_combined.lib -REMOVE:$(CRTDLL_FULLPATH)

# Extract the broken object file out of the combined library
crtdll.obj: msvc_combined.lib
	lib -OUT:$@ $^ -EXTRACT:$(CRTDLL_FULLPATH)

# Grab both CRT libraries and combine them into one library to simplify things
msvc_combined.lib:
	lib -OUT:$@ $(WIN32_CRT_LIBS)

endif
endif
