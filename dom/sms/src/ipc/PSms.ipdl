/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set sw=2 ts=8 et ft=cpp : */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at:
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Code.
 *
 * The Initial Developer of the Original Code is
 *   The Mozilla Foundation
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Chris Jones <jones.chris.g@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

include protocol PContent;
include "mozilla/dom/sms/Types.h";

using DeliveryState;

namespace mozilla {
namespace dom {
namespace sms {

struct SmsMessageData {
  PRInt32       id;
  DeliveryState delivery;
  nsString      sender;
  nsString      receiver;
  nsString      body;
  PRUint64      timestamp; // ms since epoch.
};

struct SmsFilterData {
  PRUint64      startDate;
  PRUint64      endDate;
  nsString[]    numbers;
  DeliveryState delivery;
};

sync protocol PSms {
    manager PContent;

child:
    NotifyReceivedMessage(SmsMessageData aMessageData);

    NotifySentMessage(SmsMessageData aMessageData);

    NotifyDeliveredMessage(SmsMessageData aMessageData);

    NotifyRequestSmsSent(SmsMessageData aMessageData, PRInt32 aRequestId,
                         PRUint64 aProcessId);

    NotifyRequestSmsSendFailed(PRInt32 aError, PRInt32 aRequestId,
                               PRUint64 aProcessId);

    NotifyRequestGotSms(SmsMessageData aMessageData, PRInt32 aRequestId,
                        PRUint64 aProcessId);

    NotifyRequestGetSmsFailed(PRInt32 aError, PRInt32 aRequestId,
                              PRUint64 aProcessId);

    NotifyRequestSmsDeleted(bool aDeleted, PRInt32 aRequestId,
                            PRUint64 aProcessId);

    NotifyRequestSmsDeleteFailed(PRInt32 aError, PRInt32 aRequestId,
                                 PRUint64 aProcessId);

    NotifyRequestNoMessageInList(PRInt32 aRequestId, PRUint64 aProcessId);

    NotifyRequestCreateMessageList(PRInt32 aListId, SmsMessageData aMessageData, PRInt32 aRequestId, PRUint64 aProcessId);

    NotifyRequestGotNextMessage(SmsMessageData aMessageData, PRInt32 aRequestId, PRUint64 aProcessId);

    NotifyRequestReadListFailed(PRInt32 aError, PRInt32 aRequestId,
                                PRUint64 aProcessId);

parent:
    sync HasSupport()
        returns (bool aHasSupport);

    sync GetNumberOfMessagesForText(nsString aText)
        returns (PRUint16 aNumber);

    SendMessage(nsString aNumber, nsString aMessage, PRInt32 aRequestId,
                PRUint64 aProcessId);

    sync SaveSentMessage(nsString aReceiver, nsString aBody, PRUint64 aDate)
        returns (PRInt32 aId);

    GetMessage(PRInt32 aMessageId, PRInt32 aRequestId, PRUint64 aProcessId);

    DeleteMessage(PRInt32 aMessageId, PRInt32 aRequestId, PRUint64 aProcessId);

    CreateMessageList(SmsFilterData aFilter, bool aReverse, PRInt32 aRequestId, PRUint64 aProcessId);

    GetNextMessageInList(PRInt32 aListId, PRInt32 aRequestId, PRUint64 aProcessId);

    ClearMessageList(PRInt32 aListId);

    __delete__();
};

} // namespace sms
} // namespace dom
} // namespace mozilla
