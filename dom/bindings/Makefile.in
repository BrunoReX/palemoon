# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.

DEPTH            = @DEPTH@
topsrcdir        = @top_srcdir@
srcdir           = @srcdir@
VPATH            = @srcdir@

LIBRARY_NAME     = dombindings_s
MSVC_ENABLE_PGO := 1
LIBXUL_LIBRARY   = 1
FORCE_STATIC_LIB = 1
EXPORT_LIBRARY   = 1
FAIL_ON_WARNINGS := 1

include $(topsrcdir)/config/config.mk
include $(topsrcdir)/ipc/chromium/chromium-config.mk

# Need this to find all our DOM source files.
include $(topsrcdir)/dom/dom-config.mk

include $(topsrcdir)/dom/webidl/WebIDL.mk

binding_include_path := mozilla/dom
all_webidl_files = $(webidl_files) $(generated_webidl_files)
# Set exported_binding_headers before adding the test IDL to the mix
exported_binding_headers := $(subst .webidl,Binding.h,$(all_webidl_files))
# Set linked_binding_cpp_files before adding the test IDL to the mix
linked_binding_cpp_files := $(subst .webidl,Binding.cpp,$(all_webidl_files))

all_webidl_files += $(test_webidl_files)

binding_header_files := $(subst .webidl,Binding.h,$(all_webidl_files))
binding_cpp_files := $(subst .webidl,Binding.cpp,$(all_webidl_files))

# We want to be able to only regenerate the .cpp and .h files that really need
# to change when a .webidl file changes.  We do this by making the
# binding_dependency_trackers targets have dependencies on the right .webidl
# files via generated .pp files, having a .BindingGen target that depends on the
# binding_dependency_trackers and which has all the generated binding .h/.cpp
# depending on it, and then in the make commands for that target being able to
# check which exact binding_dependency_trackers changed.
binding_dependency_trackers := $(subst .webidl,Binding,$(all_webidl_files))

globalgen_targets := \
  PrototypeList.h \
  RegisterBindings.h \
  RegisterBindings.cpp \
  UnionTypes.h \
  UnionTypes.cpp \
  UnionConversions.h \
  $(NULL)

# Nasty hack: when the test/Makefile.in invokes us to do codegen, it
# uses a target of
# "export TestExampleInterface-example TestExampleProxyInterface-example".
# We don't actually need to load our .o.pp files in that case, so just
# pretend like we have no CPPSRCS if that's the target.  It makes the
# test cycle much faster, which is why we're doing it.
#
# XXXbz We could try to cheat even more and only include our CPPSRCS
# when $(MAKECMDGOALS) contains libs, so that we can skip loading all
# those .o.pp when trying to make a single .cpp file too, but that
# would break |make FooBinding.o(bj)|.  Ah, well.
ifneq (export TestExampleInterface-example TestExampleProxyInterface-example,$(MAKECMDGOALS))
CPPSRCS = \
  $(linked_binding_cpp_files) \
  $(filter %.cpp, $(globalgen_targets)) \
  BindingUtils.cpp \
  CallbackInterface.cpp \
  CallbackObject.cpp \
  DOMJSProxyHandler.cpp \
  $(NULL)
endif

LOCAL_INCLUDES += -I$(topsrcdir)/js/xpconnect/src \
  -I$(topsrcdir)/js/xpconnect/wrappers \
  -I$(topsrcdir)/content/canvas/src \
  -I$(topsrcdir)/content/html/content/src \
  -I$(topsrcdir)/media/webrtc/signaling/src/peerconnection \
  -I$(topsrcdir)/dom/base \
  -I$(topsrcdir)/dom/battery \
  -I$(topsrcdir)/dom/indexedDB \
  -I$(topsrcdir)/content/xslt/src/base \
  -I$(topsrcdir)/content/xslt/src/xpath \
  -I$(topsrcdir)/content/xml/content/src \
  -I$(topsrcdir)/content/xul/content/src \
  -I$(topsrcdir)/content/xul/document/src \
  -I$(topsrcdir)/content/media/webspeech/recognition \
  $(NULL)

ifdef MOZ_AUDIO_CHANNEL_MANAGER
LOCAL_INCLUDES += \
  -I$(topsrcdir)/dom/system/gonk \
  $(NULL)
endif

ifdef MOZ_B2G_RIL
LOCAL_INCLUDES += \
  -I$(topsrcdir)/dom/icc/src \
  $(NULL)
endif

EXTRA_EXPORT_MDDEPEND_FILES := $(addsuffix .pp,$(binding_dependency_trackers))

EXPORTS_GENERATED_FILES := $(exported_binding_headers)
EXPORTS_GENERATED_DEST := $(DIST)/include/$(binding_include_path)
EXPORTS_GENERATED_TARGET := export
INSTALL_TARGETS += EXPORTS_GENERATED

ifdef GNU_CC
CXXFLAGS += -Wno-uninitialized
endif

include $(topsrcdir)/config/rules.mk

# If you change bindinggen_dependencies here, change it in
# dom/bindings/test/Makefile.in too.
bindinggen_dependencies := \
  BindingGen.py \
  Bindings.conf \
  Configuration.py \
  Codegen.py \
  ParserResults.pkl \
  parser/WebIDL.py \
  $(GLOBAL_DEPS) \
  $(NULL)

CSS2Properties.webidl: $(topsrcdir)/layout/style/nsCSSPropList.h \
                       $(topsrcdir)/layout/style/nsCSSPropAliasList.h \
                       $(webidl_base)/CSS2Properties.webidl.in \
                       $(webidl_base)/CSS2PropertiesProps.h \
                       $(srcdir)/GenerateCSS2PropertiesWebIDL.py \
                       $(GLOBAL_DEPS)
	$(CPP) $(DEFINES) $(ACDEFINES) -I$(topsrcdir)/layout/style $(webidl_base)/CSS2PropertiesProps.h | \
	  PYTHONDONTWRITEBYTECODE=1 $(PYTHON) \
	  $(srcdir)/GenerateCSS2PropertiesWebIDL.py $(webidl_base)/CSS2Properties.webidl.in > CSS2Properties.webidl

$(webidl_files): %: $(webidl_base)/%
	$(INSTALL) $(IFLAGS1) $(webidl_base)/$* .

$(test_webidl_files): %: $(srcdir)/test/%
	$(INSTALL) $(IFLAGS1) $(srcdir)/test/$* .

$(binding_header_files): .BindingGen

$(binding_cpp_files): .BindingGen

# $(binding_dependency_trackers) pick up additional dependencies via .pp files
$(binding_dependency_trackers):
	# Just bring it up to date, if it's out of date, so that we'll know that
	# we have to redo binding generation and flag this prerequisite there as
	# being newer than the bindinggen target.
	@$(TOUCH) $@

$(globalgen_targets): ParserResults.pkl

%-example: .BindingGen
	PYTHONDONTWRITEBYTECODE=1 $(PYTHON) $(topsrcdir)/config/pythonpath.py \
	  $(PLY_INCLUDE) -I$(srcdir)/parser \
	  $(srcdir)/ExampleGen.py \
	  $(srcdir)/Bindings.conf $*

CACHE_DIR = _cache

globalgen_dependencies := \
  GlobalGen.py \
  Bindings.conf \
  Configuration.py \
  Codegen.py \
  parser/WebIDL.py \
  ../webidl/WebIDL.mk \
  $(all_webidl_files) \
  $(CACHE_DIR)/.done \
  $(GLOBAL_DEPS) \
  $(NULL)

$(CACHE_DIR)/.done:
	$(MKDIR) -p $(CACHE_DIR)
	@$(TOUCH) $@

ParserResults.pkl: $(globalgen_dependencies)
	# Running GlobalGen.py updates ParserResults.pkl as a side-effect
	PYTHONDONTWRITEBYTECODE=1 $(PYTHON) $(topsrcdir)/config/pythonpath.py \
    $(PLY_INCLUDE) -I$(srcdir)/parser \
    $(srcdir)/GlobalGen.py $(srcdir)/Bindings.conf . \
    --cachedir=$(CACHE_DIR) \
    $(all_webidl_files)

.BindingGen: $(bindinggen_dependencies) $(binding_dependency_trackers)
	# Make sure .deps actually exists, since we'll try to write to it from
	# BindingGen.py but we're typically running in the export phase, which
	# is before anyone has bothered creating .deps.
	$(MKDIR) -p .deps
	# Pass our long lists through files to try to avoid blowing
	# out the command line
	echo $(all_webidl_files) > .all-webidl-file-list
	echo $? > .changed-dependency-list
	# BindingGen.py will examine the changed dependency list to figure out
	# what it really needs to regenerate.
	PYTHONDONTWRITEBYTECODE=1 $(PYTHON) $(topsrcdir)/config/pythonpath.py \
    $(PLY_INCLUDE) -I$(srcdir)/parser \
    $(srcdir)/BindingGen.py \
    $(srcdir)/Bindings.conf \
    $(CURDIR) \
    .all-webidl-file-list \
    .changed-dependency-list
	# Now touch the .BindingGen file so that we don't have to keep redoing
	# all that until something else actually changes.
	@$(TOUCH) $@

GARBAGE += \
  webidlyacc.py \
  parser.out \
  $(wildcard *-example.h) \
  $(wildcard *-example.cpp) \
  .BindingGen \
  .all-webidl-file-list \
  .changed-dependency-list \
  $(binding_dependency_trackers) \
  $(NULL)

# Make sure all binding header files are created during the export stage, so we
# don't have issues with .cpp files being compiled before we've generated the
# headers they depend on.  This is really only needed for the test files, since
# the non-test headers are all exported above anyway.  Note that this means that
# we do all of our codegen during export.
export:: $(binding_header_files)

distclean::
	-$(RM) \
        $(binding_header_files) \
        $(binding_cpp_files) \
        $(all_webidl_files) \
        $(globalgen_targets) \
        ParserResults.pkl \
        $(NULL)
