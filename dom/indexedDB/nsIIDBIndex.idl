/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=2 et sw=2 tw=80: */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Indexed Database.
 *
 * The Initial Developer of the Original Code is
 * The Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Ben Turner <bent.mozilla@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIIDBObjectStore;
interface nsIIDBRequest;

/**
 * IDBIndex interface.  See
 * http://dev.w3.org/2006/webapi/WebSimpleDB/#idl-def-IDBIndex for more
 * information.
 */
[scriptable, builtinclass, uuid(233ec586-7b34-4263-b27e-a4991b757597)]
interface nsIIDBIndex : nsISupports
{
  readonly attribute DOMString name;

  readonly attribute DOMString storeName;

  [implicit_jscontext]
  readonly attribute jsval keyPath;

  readonly attribute boolean unique;

  readonly attribute boolean multiEntry;

  readonly attribute nsIIDBObjectStore objectStore;

  [implicit_jscontext]
  nsIIDBRequest
  get(in jsval key);

  [implicit_jscontext]
  nsIIDBRequest
  getKey(in jsval key);

  [implicit_jscontext, optional_argc]
  nsIIDBRequest
  getAll([optional /* null */] in jsval key,
         [optional /* unlimited */] in unsigned long limit);

  [implicit_jscontext, optional_argc]
  nsIIDBRequest
  getAllKeys([optional /* null */] in jsval key,
             [optional /* unlimited */] in unsigned long limit);

  [implicit_jscontext, optional_argc]
  nsIIDBRequest
  openCursor([optional /* null */] in jsval key,
             [optional /* nsIIDBCursor::NEXT */] in unsigned short direction);

  [implicit_jscontext, optional_argc]
  nsIIDBRequest
  openKeyCursor([optional /* null */] in jsval key,
                [optional /* nsIIDBCursor::NEXT */] in unsigned short direction);

  // Accepts null, a key value, or a nsIIDBKeyRange object.
  [implicit_jscontext, optional_argc]
  nsIIDBRequest
  count([optional] in jsval key);
};
