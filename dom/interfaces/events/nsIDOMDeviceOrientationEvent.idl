/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Foundation
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIDOMEvent.idl"

[scriptable, uuid(daf2d570-0ecc-4aa0-aba4-26f60dfcba6a)]
interface nsIDOMDeviceOrientationEvent : nsIDOMEvent
{
  void initDeviceOrientationEvent(in DOMString eventTypeArg,
                                  in boolean canBubbleArg,
                                  in boolean cancelableArg,
                                  in double alpha,
                                  in double beta,
                                  in double gamma,
                                  in boolean absolute);

  /*
   * W3C specification values: http://dev.w3.org/geo/api/spec-source-orientation.html
   *
   * Alpha, beta and gamma are Tait-Bryan angles (Z-X'-Y''), that is they correspond to
   * yaw, pitch and roll in flight coordinates. More specifically, assume the device
   * is resting face up on a flat surface (its screen is pointing straight up). Then
   * the X axis points to the right when looking at the screen, the Y axis points up
   * when looking at the screen, and the Z axis points toward you when looking at
   * the screen. Alpha/beta/gamma then define the device's orientation by applying
   * the following rotations to the device in order:
   *
   * 1) Rotate it by alpha degrees around its Z axis (like a compass, or like changing
   *    the yaw of an aircraft, assuming the Y axis is the nose of the craft); alpha
   *    is in [0,360).
   * 2) Rotate it by beta degrees around its X axis (tilting the top of the device
   *    towards or away from you, like pitching an aircraft); beta is in [-180,180).
   * 3) Rotate it by gamma degrees around its Y axis (tilting it sideways, like
   *    rolling an aircraft); gamma is in [-90,90).
   */

  readonly attribute double alpha;
  readonly attribute double beta;
  readonly attribute double gamma;
  readonly attribute boolean absolute;
};

