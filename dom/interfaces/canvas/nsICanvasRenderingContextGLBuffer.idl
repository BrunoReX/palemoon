/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is canvas 3D.
 *
 * The Initial Developer of the Original Code is
 *   Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic <vladimir@pobox.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsICanvasRenderingContextGL;

[scriptable, uuid(14eb51cd-febe-41fa-b833-4c599719121e)]
interface nsICanvasRenderingContextGLBuffer : nsISupports
{
  readonly attribute nsICanvasRenderingContextGL ownerContext;
  readonly attribute PRBool disposed;

  // immediately free the memory held by this buffer,
  // even before this object is destroyed (e.g. by the JS GC)
  void dispose();

  readonly attribute PRUint32 usage;  // either STATIC_DRAW or DYNAMIC_DRAW
  readonly attribute PRUint32 length; // number of elements
  readonly attribute PRUint32 type;   // type of each element
};

[scriptable, uuid(27a45ca4-0847-4f2e-8e32-6d4966ff3e56)]
interface nsICanvasRenderingContextGLTexture : nsISupports
{
  readonly attribute nsICanvasRenderingContextGL ownerContext;
  readonly attribute PRBool disposed;

  const PRUint32 TARGET_2D = 0;
  const PRUint32 TARGET_RECT = 1;

  readonly attribute PRUint32 target;

  // in pixels; the texture coordinates
  // are 0..w/h for TARGET_RECT, or 0.0 .. 1.0
  // for TARGET_2D
  readonly attribute PRUint32 width;
  readonly attribute PRUint32 height;

  const PRUint32 FILTER_TYPE_MAG = 0;
  const PRUint32 FILTER_TYPE_MIN = 1;
  const PRUint32 FILTER_NEAREST = 0;
  const PRUint32 FILTER_LINER = 1;

  void setFilter (in PRUint32 filterType, in PRUint32 filterMode);

  const PRUint32 WRAP_TYPE_S = 0;
  const PRUint32 WRAP_TYPE_T = 0;

  const PRUint32 WRAP_CLAMP_TO_EDGE = 1;
  const PRUint32 WRAP_REPEAT = 3;
  const PRUint32 WRAP_MIRRORED_REPEAT = 4;

  void setWrap (in PRUint32 wrapType, in PRUint32 wrapMode);
};

